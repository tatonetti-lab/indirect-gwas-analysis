"""Show that Indirect GWAS can be used to extrapolate to new traits.

Suppose we have a set of phenotypes (called feature traits) with existing GWAS
summary statistics. If a new phenotype can be approximated as a linear
combination of the feature traits, then we can approximate the GWAS for the new
phenotype using Indirect GWAS. This analysis shows that real human phenotypes
can be well-approximated using linear combinations, and that, accordingly,
approximated GWAS (via Indirect GWAS) can be highly accurate.

This functionality is useful for extrapolating GWAS to new phenotype
definitions, beyond the phenotypes for which GWAS have been conducted.
"""

import numpy as np
import pandas as pd
import polars as pl

phenotype_names = (
    pl.read_csv("../data/pheno/binary_pheno.tsv", separator="\t", n_rows=0)
    .select("^b_.*$")
    .columns
)

rule all:
  input:
    # Inputs
    "../data/pheno/binary_pheno.tsv",
    "../data/pheno/covar.tsv",
    # Outputs
    "data/phecode_map/phecode_definitions1.2.csv",
    "data/phecode_map/Phecode_map_v1_2_icd10_beta.csv",
    "data/pheno/phecodes.tsv",
    "data/pheno/phecodes_inclusion_only.tsv",
    "data/coef/binary_to_phecode.tsv",
    "data/coef/binary_to_phecode_inclusion.tsv",
    "data/pcov/adjusted_covariance.tsv",
    "data/igwas/phecodes.tsv.zst",
    "data/igwas/phecodes_inclusion_only.tsv.zst",
    "data/gwas/plink.log",
    "data/gwas/inclusion.log",


rule download_phecode_map:
  output:
    def_df = "data/phecode_map/phecode_definitions1.2.csv",
    map_df = "data/phecode_map/Phecode_map_v1_2_icd10_beta.csv",
  shell:
    """
    wget -O {output.def_df}.zip https://phewascatalog.org/files/phecode_definitions1.2.csv.zip
    unzip {output.def_df}.zip -d data/phecode_map

    wget -O {output.map_df}.zip https://phewascatalog.org/files/Phecode_map_v1_2_icd10_beta.csv.zip
    unzip {output.map_df}.zip -d data/phecode_map
    """


rule assign_phecodes:
  input:
    def_df = "data/phecode_map/phecode_definitions1.2.csv",
    map_df = "data/phecode_map/Phecode_map_v1_2_icd10_beta.csv",
    phenos = "../data/pheno/binary_pheno.tsv",
  output:
    "data/pheno/phecodes.tsv",
    "data/pheno/phecodes_inclusion_only.tsv",
  conda:
    "phd"
  notebook:
    "1.assign_phecodes.py.ipynb"


rule regress_phecodes:
  input:
    phecode = "data/pheno/phecodes.tsv",
    inclusion = "data/pheno/phecodes_inclusion_only.tsv",
    binary = "../data/pheno/binary_pheno.tsv",
  output:
    "data/coef/binary_to_phecode.tsv",
    "data/coef/binary_to_phecode_inclusion.tsv",
  conda:
    "phd"
  notebook:
    "2.regress_phecodes.py.ipynb"


rule gwas:
  input:
    geno = multiext("../data/geno/geno_500k", ".pgen", ".psam", ".pvar"),
    pheno = "data/pheno/phecodes.tsv",
    covar = "../data/pheno/covar.tsv",
  output:
    "data/gwas/plink.log",
  params:
    geno_prefix = "../data/geno/geno_500k",
    output_prefix = "data/gwas/plink",
  threads: 35
  benchmark: "benchmarks/gwas.txt"
  shell:
    """
    plink2 \
      --pfile {params.geno_prefix} \
      --glm zs hide-covar \
      --pheno {input.pheno} \
      --covar {input.covar} \
      --threads {threads} \
      --out {params.output_prefix}
    """


rule gwas_inclusion:
  input:
    geno = multiext("../data/geno/geno_500k", ".pgen", ".psam", ".pvar"),
    pheno = "data/pheno/phecodes_inclusion_only.tsv",
    covar = "../data/pheno/covar.tsv",
  output:
    "data/gwas/inclusion.log",
  params:
    geno_prefix = "../data/geno/geno_500k",
    output_prefix = "data/gwas/inclusion",
  threads: 35
  benchmark: "benchmarks/gwas.txt"
  shell:
    """
    plink2 \
      --pfile {params.geno_prefix} \
      --glm zs hide-covar \
      --pheno {input.pheno} \
      --covar {input.covar} \
      --threads {threads} \
      --out {params.output_prefix}
    """

rule adjusted_covariance:
  input:
    pheno = "../data/pheno/binary_pheno.tsv",
    covar = "../data/pheno/covar.tsv",
  output:
    "data/pcov/adjusted_covariance.tsv",
  run:
    pheno_df = pl.read_csv(input.pheno, separator="\t").drop("FID")
    covar_df = pl.read_csv(input.covar, separator="\t").drop("FID")
    merged_df = pheno_df.join(covar_df, on=["IID"])
    Y = merged_df.select(pheno_df.drop(["IID"]).columns).to_numpy()
    X = merged_df.select(covar_df.drop(["IID"]).columns, const=1).to_numpy()
    beta = np.linalg.lstsq(X, Y, rcond=None)[0]
    residuals = Y - X @ beta
    cov = np.cov(residuals, rowvar=False)
    pheno_names = pheno_df.drop(["IID"]).columns
    names = [f"plink.{name}.glm.linear.zst" for name in pheno_names]
    (
        pd.DataFrame(cov, index=names, columns=names)
        .to_csv(output[0], sep="\t", float_format="%.6f")
    )


rule igwas:
  input:
    proj_coef = "data/coef/binary_to_phecode.tsv",
    pcov = "data/pcov/adjusted_covariance.tsv",
    gwas = expand(
      "../data/gwas/plink.{name}.glm.linear.zst",
      name=phenotype_names
    ),
  output:
    "data/igwas/phecodes.tsv.zst",
  threads: 35,
  benchmark: "benchmarks/igwas.txt",
  shell:
    """
    igwas \
      --projection-matrix {input.proj_coef} \
      --covariance-matrix {input.pcov} \
      --gwas-results {input.gwas} \
      --output-file {output} \
      --num-threads {threads} \
      --capacity 100 \
      --compress \
      --num-covar 12 \
      --beta BETA \
      --std-error SE \
      --sample-size OBS_CT \
      --chunksize 500000
    """


rule igwas_inclusion:
  input:
    proj_coef = "data/coef/binary_to_phecode_inclusion.tsv",
    pcov = "data/pcov/adjusted_covariance.tsv",
    gwas = expand(
      "../data/gwas/plink.{name}.glm.linear.zst",
      name=phenotype_names
    ),
  output:
    "data/igwas/phecodes_inclusion_only.tsv.zst",
  threads: 35,
  benchmark: "benchmarks/igwas_inclusion.txt",
  shell:
    """
    igwas \
      --projection-matrix {input.proj_coef} \
      --covariance-matrix {input.pcov} \
      --gwas-results {input.gwas} \
      --output-file {output} \
      --num-threads {threads} \
      --capacity 100 \
      --compress \
      --num-covar 12 \
      --beta BETA \
      --std-error SE \
      --sample-size OBS_CT \
      --chunksize 500000
    """
