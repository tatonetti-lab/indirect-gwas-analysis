"""Show that Indirect GWAS can accelerate pan-biobank GWAS.

Indirect GWAS accelerates pan-biobank GWAS using a low-dimensional 
approximation of the phenotypes. Specifically, given N phenotypes, we compute
the first K principal components of the phenotypes and use these as the latent
phenotypes for GWAS. Once we have summary statistics for the latent phenotypes,
we reconstruct the full-size GWAS summary statistics using Indirect GWAS. This
relies on the fact that ordinary least squares regression has an exact solution.

This analysis demonstrates the trade-off between faster computation speed and
GWAS accuracy when using Indirect GWAS. More PCs means slower computation but
more accurate GWAS, and vice versa.
"""

import numpy as np
import pandas as pd
import polars as pl
import sklearn.decomposition

n_phenotypes = 1238
pca_names = [f"PC{i}" for i in range(1, n_phenotypes + 1)]

def get_gwas_files(pheno_path, prefix=None):
    colnames = pl.read_csv(pheno_path, separator="\t", n_rows=0)
    if "FID" in colnames.columns:
        colnames = colnames.drop("FID")
    if "IID" in colnames.columns:
        colnames = colnames.drop("IID")

    if prefix is not None:
        colnames = colnames.select(f"^{prefix}.*$")

    colnames = colnames.columns
    return [f"data/gwas/plink.{name}.glm.linear.zst" for name in colnames]


rule all:
  input:
    # Inputs
    "../data/pheno/pheno_jan2024.tsv",
    "../data/pheno/covar.tsv",
    multiext("../data/geno/geno_500k", ".pgen", ".psam", ".pvar"),
    # Outputs
    "data/pheno/binary_pheno.tsv",
    "data/pheno/pca.tsv",
    expand("data/coef/pca_{frac}.tsv", frac=[0.1, 0.25, 0.5, 0.75, 0.9, 1.0]),
    expand("data/gwas/plink.{name}.glm.linear.zst", name=pca_names),
    get_gwas_files("../data/pheno/pheno_jan2024.tsv", prefix="b_"),
    expand("data/igwas/pca_{frac}.tsv.zst", frac=[0.1, 0.25, 0.5, 0.75, 0.9, 1.0]),


rule filter_binary_pheno:
  input:
    raw_pheno = "../data/pheno/pheno_jan2024.tsv",
    psam = "../data/geno/geno_500k.psam",
  output:
    "data/pheno/binary_pheno.tsv",
  run:
    psam_df = pl.scan_csv(input.psam, separator="\t").select("IID")
    (
        pl.scan_csv(input.raw_pheno, separator="\t")
        .select(pl.col("#FID").alias("FID"), "IID", "^b_.*$")
        .join(psam_df, on="IID")
        .sink_csv(output[0], separator="\t")
    )


rule pca:
  input:
    "data/pheno/binary_pheno.tsv",
  output:
    "data/pheno/pca.tsv",
  benchmark: "benchmarks/pca.txt",
  threads: 35,
  run:
    pheno_df = pl.read_csv(input[0], separator="\t")

    X = pheno_df.drop(["FID", "IID"])
    feature_names = X.columns
    X = X.to_numpy().astype(np.float32)

    pca = sklearn.decomposition.PCA()
    pca.fit(X)
    X_pca = pca.transform(X)
    # Normalize the PCs to have unit variance and mean zero
    X_pca = (X_pca - X_pca.mean(axis=0)) / X_pca.std(axis=0)

    pca_names = [f"PC{i}" for i in range(1, X.shape[1] + 1)]
    X_pca_df = pl.concat([
        pheno_df[["FID", "IID"]],
        pl.DataFrame(X_pca, schema=pca_names)
    ], how="horizontal")
    X_pca_df.write_csv(output[0], separator="\t")


rule compute_projection_coef:
  input:
    pheno = "data/pheno/binary_pheno.tsv",
    pca = "data/pheno/pca.tsv",
  output:
    "data/coef/pca_{frac}.tsv",
  threads: 35,
  benchmark: "benchmarks/compute_coef_{frac}.txt",
  run:
    pheno_df = pl.read_csv(input.pheno, separator="\t").drop(["FID"])
    pca_df = (
        pl.read_csv(input.pca, separator="\t")
        .drop(["FID"])
        .rename(lambda x: f"pheno.{x}" if x != "IID" else x)
    )
    merged_df = pheno_df.join(pca_df, on=["IID"])

    X = merged_df.select(pca_df.drop("IID").columns).to_numpy()
    Y = merged_df.select(pheno_df.drop("IID").columns).to_numpy()

    frac = float(wildcards.frac)
    n = int(frac * X.shape[1])
    X = X[:, :n]
    pca_names = [f"plink.{name.replace('pheno.', '')}.glm.linear.zst"
                 for name in pca_df.drop("IID").columns]
    pheno_names = pheno_df.drop("IID").columns
    coef = np.linalg.lstsq(X, Y, rcond=None)[0]
    full_coef = np.zeros((Y.shape[1], Y.shape[1]))
    full_coef[:n] = coef
    coef_df = pd.DataFrame(full_coef, index=pca_names, columns=pheno_names)
    (
        coef_df
        .reset_index()
        .rename(columns={"index": "feature"})
        .pipe(pl.DataFrame)
        .write_csv(output[0], separator="\t")
    )


rule gwas_pcs:
  input:
    geno = multiext("../data/geno/geno_500k", ".pgen", ".psam", ".pvar"),
    pca = "data/pheno/pca.tsv",
    covar = "../data/pheno/covar.tsv",
  output:
    expand("data/gwas/plink.{name}.glm.linear.zst", name=pca_names),
  params:
    geno_prefix = "../data/geno/geno_500k",
    output_prefix = "data/gwas/plink",
  threads: 35,
  benchmark: "benchmarks/gwas_pca.txt",
  shell:
    """
    plink2 \
      --pfile {params.geno_prefix} \
      --pheno {input.pca} \
      --covar {input.covar} \
      --glm zs hide-covar \
      --threads {threads} \
      --out {params.output_prefix}
    """


rule gwas_direct:
  input:
    geno = multiext("../data/geno/geno_500k", ".pgen", ".psam", ".pvar"),
    pheno = "data/pheno/binary_pheno.tsv",
    covar = "../data/pheno/covar.tsv",
  output:
    get_gwas_files("../data/pheno/pheno_jan2024.tsv", prefix="b_"),
  params:
    geno_prefix = "../data/geno/geno_500k",
    output_prefix = "data/gwas/plink",
  threads: 35,
  benchmark: "benchmarks/gwas_binary_phenotypes.txt",
  shell:
    """
    plink2 \
      --pfile {params.geno_prefix} \
      --pheno {input.pheno} \
      --covar {input.covar} \
      --glm zs hide-covar \
      --threads {threads} \
      --out {params.output_prefix}
    """


rule adjusted_covariance:
  input:
    pheno = "data/pheno/pca.tsv",
    covar = "../data/pheno/covar.tsv",
  output:
    "data/pcov/pca.tsv",
  threads: 35,
  benchmark: "benchmarks/compute_cov.txt",
  run:
    pheno_df = (
        pl.read_csv(input.pheno, separator="\t")
        .drop("FID")
        .rename(lambda x: f"pheno.{x}" if x != "IID" else x)
    )
    covar_df = pl.read_csv(input.covar, separator="\t") .drop("FID")
    merged_df = pheno_df.join(covar_df, on=["IID"])
    Y = merged_df.select(pheno_df.drop("IID").columns).to_numpy()
    X = merged_df.select(covar_df.drop("IID").columns).to_numpy()
    beta = np.linalg.lstsq(X, Y, rcond=None)[0]
    residuals = Y - X @ beta
    cov = np.cov(residuals, rowvar=False)
    pheno_names = pheno_df.drop("IID").columns
    names = [f"plink.{name.replace('pheno.', '')}.glm.linear.zst"
             for name in pheno_names]
    (
        pd.DataFrame(cov, index=names, columns=names)
        .to_csv(output[0], sep="\t")
    )


rule gwas_indirect:
  input:
    proj_coef = "data/coef/pca_{frac}.tsv",
    pcov = "data/pcov/pca.tsv",
    gwas = expand("data/gwas/plink.{name}.glm.linear.zst", name=pca_names),
  output:
    "data/igwas/pca_{frac}.tsv.zst",
  threads: 35,
  benchmark: "benchmarks/igwas_{frac}.txt",
  shell:
    """
    igwas \
      --projection-matrix {input.proj_coef} \
      --covariance-matrix {input.pcov} \
      --gwas-results {input.gwas} \
      --output-file {output} \
      --num-threads {threads} \
      --capacity {threads} \
      --compress \
      --num-covar 12 \
      --beta BETA \
      --std-error SE \
      --sample-size OBS_CT
    """
