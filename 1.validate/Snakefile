"""Validate Indirect GWAS using real data.

This analysis generates some arbitrary linear combinations of phenotypes and 
confirms that Indirect GWAS produces the same results as corresponding direct
methods. This comparison will be performed for univariate OLS, multivariate 
OLS, SAIGE, Regenie, and Fast-GWA. This comparison only involves 10 features
and 10 projections to keep the computational cost low.
"""

import numpy as np
import pandas as pd
import polars as pl


blood_biochem_fields = [
    # https://biobank.ndph.ox.ac.uk/ukb/label.cgi?id=17518
    "30620", "30600", "30610", "30630", "30640", "30650", "30710", "30680",
    "30690", "30700", "30720", "30660", "30730", "30740", "30750", "30760",
    "30770", "30780", "30790", "30800", "30810", "30820", "30830", "30850",
    "30840", "30860", "30870", "30880", "30670", "30890"
]
blood_biochem_names = set(f"q_{f}_0" for f in blood_biochem_fields)

# Exclude "#FID" and "IID"
pheno_names = pl.read_csv("../data/pheno/pheno_jan2024.tsv", n_rows=0, separator="\t").columns[2:]
features = sorted([n for n in pheno_names if n in blood_biochem_names])
n_features = 10
features = features[:n_features]
feature_filenames = [f"plink.{name}.glm.linear.zst" for name in features]

n_projections = 10
projection_names = [f"PROJ{i:03}" for i in range(1, n_projections + 1)]


rule all:
  input: 
    # Inputs
    "../data/pheno/pheno_jan2024.tsv",
    "../data/pheno/covar.tsv",
    multiext("../data/geno/geno_500k", ".pgen", ".psam", ".pvar"),
    "../data/grm/gcta.grm.sp",
    # Outputs
    "data/pheno/feature_pheno.tsv",
    "data/pheno/projection_coef.tsv",
    "data/pheno/projected_pheno.tsv",
    "data/pheno/gwas_pheno.tsv",
    expand(
      "data/direct/ols_univariate/plink.{name}.glm.linear.zst",
      name=projection_names + features
    ),
    expand(
      "data/direct/ols_multivariate/plink.{name}.glm.linear.zst",
      name=projection_names + features
    ),
    expand(
      "data/direct/regenie/direct_{name}.regenie.gz",
      name=projection_names + features
    ),
    expand(
      "data/direct/fastgwa/{name}.fastGWA",
      name=projection_names + features
    ),
    expand("data/pcov/{name}_covariance.tsv", name=["raw", "adjusted"]),
    expand("data/pcov/regenie_adjusted_covariance_chr{i}.tsv", i=range(1, 24)),
    expand("data/igwas/{name}.tsv.zst", name=["univariate", "multivariate"]),
    # CHR 23 (X + Y) is not included in our genotypes
    expand("data/igwas/regenie_chr{i}.tsv.zst", i=range(1, 23)),
    "data/igwas/regenie.tsv.zst",


rule make_feature_pheno:
  input:
    "../data/pheno/pheno_jan2024.tsv",
  output:
    "data/pheno/feature_pheno.tsv",
  run:
    (
        pl.scan_csv(input[0], separator="\t")
        .select(pl.col("#FID").alias("FID"), "IID", pl.col(features).round(3))
        .sink_csv(output[0], separator="\t")
    )

rule make_projected_pheno:
  input:
    "data/pheno/feature_pheno.tsv",
  output:
    coef = "data/pheno/projection_coef.tsv",
    pheno = "data/pheno/projected_pheno.tsv",
  run:
    df = pd.read_csv(input[0], sep="\t", index_col=[0, 1])
    np.random.seed(0)
    coef = np.random.normal(size=(len(features), n_projections))
    coef_df = pd.DataFrame(
        np.round(coef, decimals=3), 
        index=feature_filenames,
        columns=projection_names
    )
    coef_df.to_csv(output.coef, sep="\t")
    (
        (df @ coef_df)
        .reset_index()
        .pipe(pl.DataFrame)
        .select("FID", "IID", pl.col(projection_names).round(3))
        .write_csv(output.pheno, separator="\t")
    )

rule make_gwas_pheno:
  input:
    features = "data/pheno/feature_pheno.tsv",
    projections = "data/pheno/projected_pheno.tsv",
  output:
    "data/pheno/gwas_pheno.tsv"
  run:
    (
        pl.scan_csv(input.features, separator="\t")
        .join(pl.scan_csv(input.projections, separator="\t"), on=["FID", "IID"])
        .sink_csv(output[0], separator="\t")
    )

rule direct_univariate_gwas:
  input:
    geno = multiext("../data/geno/geno_500k", ".pgen", ".psam", ".pvar"),
    pheno = "data/pheno/gwas_pheno.tsv",
  output:
    expand(
      "data/direct/ols_univariate/plink.{name}.glm.linear.zst", 
      name=projection_names + features
    ),
  params:
    geno_prefix = "../data/geno/geno_500k",
    output_prefix = "data/direct/ols_univariate/plink",
  benchmark: "benchmarks/direct_univariate_gwas.txt"
  threads: 35
  shell:
    """
    plink2 \
      --pfile {params.geno_prefix} \
      --pheno {input.pheno} \
      --glm allow-no-covars zs \
      --threads {threads} \
      --out {params.output_prefix}
    """

rule direct_multivariate_gwas:
  input:
    geno = multiext("../data/geno/geno_500k", ".pgen", ".psam", ".pvar"),
    pheno = "data/pheno/gwas_pheno.tsv",
    covar = "../data/pheno/covar.tsv",
  output:
    expand(
      "data/direct/ols_multivariate/plink.{name}.glm.linear.zst", 
      name=projection_names + features
    ),
  params:
    geno_prefix = "../data/geno/geno_500k",
    output_prefix = "data/direct/ols_multivariate/plink",
  benchmark: "benchmarks/direct_multivariate_gwas.txt"
  threads: 35
  shell:
    """
    plink2 \
      --pfile {params.geno_prefix} \
      --pheno {input.pheno} \
      --covar {input.covar} \
      --glm zs hide-covar \
      --threads {threads} \
      --out {params.output_prefix}
    """


rule direct_regenie_step1:
  input:
    geno = multiext("../data/geno/geno_500k", ".pgen", ".psam", ".pvar"),
    pheno = "data/pheno/gwas_pheno.tsv",
    covar = "../data/pheno/covar.tsv",
  output:
    expand(
      "data/direct/regenie/direct_{i}.loco.gz",
      i=range(1, n_projections + n_features + 1)
    ),
    "data/direct/regenie/direct_pred.list",
  params:
    geno_prefix = "../data/geno/geno_500k",
    output_prefix = "data/direct/regenie/direct",
  benchmark: "benchmarks/direct_regenie_step1.txt"
  threads: 35
  shell:
    """
    regenie \
      --step 1 \
      --pgen {params.geno_prefix} \
      --phenoFile {input.pheno} \
      --covarFile {input.covar} \
      --bsize 1000 \
      --lowmem \
      --gz \
      --threads {threads} \
      --out {params.output_prefix}
    """

rule direct_regenie_step2:
  input:
    geno = multiext("../data/geno/geno_500k", ".pgen", ".psam", ".pvar"),
    pheno = "data/pheno/gwas_pheno.tsv",
    covar = "../data/pheno/covar.tsv",
    pred = "data/direct/regenie/direct_pred.list",
  output:
    expand(
      "data/direct/regenie/direct_{name}.regenie.gz",
      name=projection_names + features
    ),
  params:
    geno_prefix = "../data/geno/geno_500k",
    output_prefix = "data/direct/regenie/direct",
  benchmark: "benchmarks/direct_regenie_step2.txt"
  threads: 35
  shell:
    """
    regenie \
      --step 2 \
      --pgen {params.geno_prefix} \
      --phenoFile {input.pheno} \
      --covarFile {input.covar} \
      --bsize 1000 \
      --lowmem \
      --gz \
      --threads {threads} \
      --pred {input.pred} \
      --out {params.output_prefix}
    """

def get_feature_names(file):
    return pl.read_csv(file, n_rows=0, separator="\t").columns[2:]

def get_feature_index(file, feature):
    """Use an input function to ensure this is only run once the input file
    is available"""
    return get_feature_names(file).index(feature) + 1

rule fastgwa:
  input:
    geno = multiext("../data/geno/geno_500k", ".pgen", ".psam", ".pvar"),
    grm = "../data/grm/gcta.grm.sp",
    pheno = "data/pheno/gwas_pheno.tsv",
    covar = "../data/pheno/covar.tsv",
  output:
    "data/direct/fastgwa/{phenotype}.fastGWA",
  params:
    geno_prefix = "../data/geno/geno_500k",
    grm_prefix = "../data/grm/gcta",
    output_prefix = lambda wc: f"data/direct/fastgwa/{wc.phenotype}",
    mpheno = lambda wc, input: get_feature_index(input.pheno, wc.phenotype),
  benchmark: "benchmarks/direct_fastgwa_{phenotype}.txt"
  threads: 35
  shell:
    """
    gcta \
      --pfile {params.geno_prefix} \
      --grm-sparse {params.grm_prefix} \
      --fastGWA-mlm \
      --pheno {input.pheno} \
      --mpheno {params.mpheno} \
      --qcovar {input.covar} \
      --thread-num {threads} \
      --out {params.output_prefix}
    """


rule raw_covariance:
  input:
    "data/pheno/feature_pheno.tsv",
  output:
    "data/pcov/raw_covariance.tsv",
  run:
    cov_df = pd.read_csv(input[0], sep="\t", index_col=[0, 1]).cov()
    names = cov_df.columns
    new_names = [f"plink.{name}.glm.linear.zst" for name in names]
    cov_df.columns = new_names
    cov_df.index = new_names
    cov_df.to_csv(output[0], sep="\t")


rule adjusted_covariance:
  input:
    pheno = "data/pheno/feature_pheno.tsv",
    covar = "../data/pheno/covar.tsv",
  output:
    "data/pcov/adjusted_covariance.tsv",
  run:
    pheno_df = pl.read_csv(input.pheno, separator="\t")
    covar_df = pl.read_csv(input.covar, separator="\t")
    merged_df = pheno_df.join(covar_df, on=["FID", "IID"])
    Y = merged_df.select(pheno_df.drop(["FID", "IID"]).columns).to_numpy()
    X = merged_df.select(covar_df.drop(["FID", "IID"]).columns).to_numpy()
    beta = np.linalg.lstsq(X, Y, rcond=None)[0]
    residuals = Y - X @ beta
    cov = np.cov(residuals, rowvar=False)
    pheno_names = pheno_df.drop(["FID", "IID"]).columns
    names = [f"plink.{name}.glm.linear.zst" for name in pheno_names]
    (
        pd.DataFrame(cov, index=names, columns=names)
        .to_csv(output[0], sep="\t")
    )


rule regenie_adjusted_covariance:
  input:
    loco = expand("data/direct/regenie/direct_{i}.loco.gz", i=range(1, n_features + 1)),
    pheno = "data/pheno/gwas_pheno.tsv",
    covar = "../data/pheno/covar.tsv",
  output:
    "data/pcov/regenie_adjusted_covariance_chr{idx}.tsv",
  run:
    covar_df = pl.read_csv(input.covar, separator="\t").drop("FID")
    pheno_names = get_feature_names(input.pheno)
    inputs = [(f, int(f.split("_")[1].split(".")[0])) for f in input.loco]
    sorted_inputs = sorted(inputs, key=lambda x: x[1])
    full_pheno_df = list()
    for f, i in sorted_inputs:
        phenotype_name = pheno_names[i - 1]
        name = f"direct_{phenotype_name}.regenie.zst"
        pheno_df = (
            pd.read_csv(f, sep="\s+", index_col=0)
            .T
            .reset_index()
            .pipe(pl.DataFrame)
            .with_columns(
                pl.col("index")
                .str.split_exact("_", 1)
                .struct.rename_fields(["FID", "IID"])
            )
            .unnest("index")
            .drop("FID")
            .with_columns(pl.col("IID").cast(pl.Int64))
            .join(covar_df, on=["IID"])
        )
        X = pheno_df.select(covar_df.drop(["IID"]).columns).to_numpy()
        y = pheno_df.select(wildcards.idx).to_numpy().ravel()
        beta = np.linalg.lstsq(X, y, rcond=None)[0]
        residuals = y - X @ beta
        series = pd.Series(residuals.ravel(), name=name)
        full_pheno_df.append(series)

    full_pheno_df = pd.concat(full_pheno_df, axis=1)
    cov = full_pheno_df.cov()
    cov.to_csv(output[0], sep="\t")


rule indirect_univariate:
  input:
    proj_coef = "data/pheno/projection_coef.tsv",
    pcov = "data/pcov/raw_covariance.tsv",
    gwas = expand(
      "data/direct/ols_univariate/plink.{name}.glm.linear.zst",
      name=features
    ),
  output:
    "data/igwas/univariate.tsv.zst",
  threads: 35,
  benchmark: "benchmarks/igwas_univariate.txt",
  shell:
    """
    igwas \
      --projection-matrix {input.proj_coef} \
      --covariance-matrix {input.pcov} \
      --gwas-results {input.gwas} \
      --output-file {output} \
      --num-threads {threads} \
      --capacity {threads} \
      --compress \
      --num-covar 0 \
      --beta BETA \
      --std-error SE \
      --sample-size OBS_CT
    """


rule indirect_multivariate:
  input:
    proj_coef = "data/pheno/projection_coef.tsv",
    pcov = "data/pcov/adjusted_covariance.tsv",
    gwas = expand(
      "data/direct/ols_multivariate/plink.{name}.glm.linear.zst",
      name=features
    ),
  output:
    "data/igwas/multivariate.tsv.zst",
  threads: 35,
  benchmark: "benchmarks/igwas_multivariate.txt",
  shell:
    """
    igwas \
      --projection-matrix {input.proj_coef} \
      --covariance-matrix {input.pcov} \
      --gwas-results {input.gwas} \
      --output-file {output} \
      --num-threads {threads} \
      --capacity {threads} \
      --compress \
      --num-covar 12 \
      --beta BETA \
      --std-error SE \
      --sample-size OBS_CT
    """


rule filter_regenie_gwas_results:
  input:
    "data/direct/regenie/direct_{name}.regenie.gz",
  output:
    "data/direct/regenie/chr{chr}/direct_{name}.regenie.zst",
  run:
    (
        pl.read_csv(input[0], separator=" ")
        .filter(pl.col("CHROM") == int(wildcards.chr))
        .to_pandas()
        .to_csv(output[0], sep="\t", index=False)
    )


rule rename_regenie_projection:
  input:
    "data/pheno/projection_coef.tsv",
  output:
    "data/pheno/projection_coef_regenie.tsv",
  run:
    (
        pd.read_csv(input[0], sep="\t", index_col=0)
        .rename(index=lambda name: (
              name
              .replace("plink.", "direct_")
              .replace(".glm.linear.zst", ".regenie.zst")
            )
        )
        .to_csv(output[0], sep="\t")
    )


rule indirect_regenie:
  input:
    proj_coef = "data/pheno/projection_coef_regenie.tsv",
    pcov = "data/pcov/regenie_adjusted_covariance_chr{chr}.tsv",
    gwas = expand(
      "data/direct/regenie/chr{{chr}}/direct_{name}.regenie.zst",
      name=features
    ),
  output:
    "data/igwas/regenie_chr{chr}.tsv.zst",
  threads: 35,
  benchmark: "benchmarks/igwas_regenie_chr{chr}.txt",
  shell:
    """
    igwas \
      --projection-matrix {input.proj_coef} \
      --covariance-matrix {input.pcov} \
      --gwas-results {input.gwas} \
      --output-file {output} \
      --num-threads {threads} \
      --capacity {threads} \
      --compress \
      --num-covar 13 \
      --beta BETA \
      --std-error SE \
      --sample-size N
    """


rule indirect_regenie_combine:
  input:
    expand("data/igwas/regenie_chr{i}.tsv.zst", i=range(1, 23)),
  output:
    "data/igwas/regenie.tsv.zst",
  run:
    pd.concat(
        [pd.read_csv(f, sep="\t") for f in input],
        axis=0
    ).to_csv(output[0], sep="\t", index=False)


rule rename_fastgwa_projection:
  input:
    "data/pheno/projection_coef.tsv",
  output:
    "data/pheno/projection_coef_fastgwa.tsv",
  run:
    (
        pd.read_csv(input[0], sep="\t", index_col=0)
        .rename(index=lambda name: (
              name
              .replace("plink.", "")
              .replace(".glm.linear.zst", ".fastGWA")
            )
        )
        .to_csv(output[0], sep="\t")
    )


rule rename_fastgwa_covariance:
  input:
    "data/pcov/raw_covariance.tsv",
  output:
    "data/pcov/raw_covariance_fastgwa.tsv",
  run:
    (
        pd.read_csv(input[0], sep="\t", index_col=0)
        .rename(index=lambda name: (
              name
              .replace("plink.", "")
              .replace(".glm.linear.zst", ".fastGWA")
            )
        )
        .rename(columns=lambda name: (
              name
              .replace("plink.", "")
              .replace(".glm.linear.zst", ".fastGWA")
            )
        )
        .to_csv(output[0], sep="\t")
    )


rule indirect_fastgwa:
  input:
    proj_coef = "data/pheno/projection_coef_fastgwa.tsv",
    pcov = "data/pcov/raw_covariance_fastgwa.tsv",
    gwas = expand("data/direct/fastgwa/{name}.fastGWA", name=features),
  output:
    "data/igwas/fastgwa.tsv.zst",
  threads: 35,
  benchmark: "benchmarks/igwas_fastgwa.txt",
  shell:
    """
    igwas \
      --projection-matrix {input.proj_coef} \
      --covariance-matrix {input.pcov} \
      --gwas-results {input.gwas} \
      --output-file {output} \
      --num-threads {threads} \
      --capacity {threads} \
      --compress \
      --num-covar 13 \
      --variant-id SNP \
      --beta BETA \
      --std-error SE \
      --sample-size N
    """
